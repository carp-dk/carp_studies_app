// Mocks generated by Mockito 5.3.2 from annotations
// in carp_study_app/test/heart_rate_data_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:carp_core/carp_core.dart' as _i3;
import 'package:carp_mobile_sensing/carp_mobile_sensing.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:permission_handler/permission_handler.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDeviceController_0 extends _i1.SmartFake
    implements _i2.DeviceController {
  _FakeDeviceController_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatum_1 extends _i1.SmartFake implements _i2.Datum {
  _FakeDatum_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeploymentService_2 extends _i1.SmartFake
    implements _i3.DeploymentService {
  _FakeDeploymentService_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStudyDeploymentStatus_3 extends _i1.SmartFake
    implements _i3.StudyDeploymentStatus {
  _FakeStudyDeploymentStatus_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDataFormat_4 extends _i1.SmartFake implements _i3.DataFormat {
  _FakeDataFormat_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SmartphoneDeploymentController].
///
/// See the documentation for Mockito's code generation for more information.
class MockSmartphoneDeploymentController extends _i1.Mock
    implements _i2.SmartphoneDeploymentController {
  MockSmartphoneDeploymentController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set permissions(Map<_i4.Permission, _i4.PermissionStatus>? _permissions) =>
      super.noSuchMethod(
        Invocation.setter(
          #permissions,
          _permissions,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.DeviceController get deviceRegistry => (super.noSuchMethod(
        Invocation.getter(#deviceRegistry),
        returnValue: _FakeDeviceController_0(
          this,
          Invocation.getter(#deviceRegistry),
        ),
      ) as _i2.DeviceController);
  @override
  String get privacySchemaName => (super.noSuchMethod(
        Invocation.getter(#privacySchemaName),
        returnValue: '',
      ) as String);
  @override
  _i2.DatumTransformer get transformer => (super.noSuchMethod(
        Invocation.getter(#transformer),
        returnValue: (_i2.Datum __p0) => _FakeDatum_1(
          this,
          Invocation.getter(#transformer),
        ),
      ) as _i2.DatumTransformer);
  @override
  _i5.Stream<_i3.DataPoint> get data => (super.noSuchMethod(
        Invocation.getter(#data),
        returnValue: _i5.Stream<_i3.DataPoint>.empty(),
      ) as _i5.Stream<_i3.DataPoint>);
  @override
  int get samplingSize => (super.noSuchMethod(
        Invocation.getter(#samplingSize),
        returnValue: 0,
      ) as int);
  @override
  _i5.Future<String?> get filename => (super.noSuchMethod(
        Invocation.getter(#filename),
        returnValue: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);
  @override
  set deployment(_i3.MasterDeviceDeployment? _deployment) => super.noSuchMethod(
        Invocation.setter(
          #deployment,
          _deployment,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set deviceRegistry(_i3.DeviceDataCollectorFactory? _deviceRegistry) =>
      super.noSuchMethod(
        Invocation.setter(
          #deviceRegistry,
          _deviceRegistry,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.DeploymentService get deploymentService => (super.noSuchMethod(
        Invocation.getter(#deploymentService),
        returnValue: _FakeDeploymentService_2(
          this,
          Invocation.getter(#deploymentService),
        ),
      ) as _i3.DeploymentService);
  @override
  set deploymentService(_i3.DeploymentService? _deploymentService) =>
      super.noSuchMethod(
        Invocation.setter(
          #deploymentService,
          _deploymentService,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.StudyDeploymentStatus get deploymentStatus => (super.noSuchMethod(
        Invocation.getter(#deploymentStatus),
        returnValue: _FakeStudyDeploymentStatus_3(
          this,
          Invocation.getter(#deploymentStatus),
        ),
      ) as _i3.StudyDeploymentStatus);
  @override
  set deploymentStatus(_i3.StudyDeploymentStatus? _deploymentStatus) =>
      super.noSuchMethod(
        Invocation.setter(
          #deploymentStatus,
          _deploymentStatus,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set device(_i3.MasterDeviceDescriptor? _device) => super.noSuchMethod(
        Invocation.setter(
          #device,
          _device,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Stream<_i3.StudyStatus> get statusEvents => (super.noSuchMethod(
        Invocation.getter(#statusEvents),
        returnValue: _i5.Stream<_i3.StudyStatus>.empty(),
      ) as _i5.Stream<_i3.StudyStatus>);
  @override
  _i3.StudyStatus get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: _i3.StudyStatus.DeploymentNotStarted,
      ) as _i3.StudyStatus);
  @override
  set status(_i3.StudyStatus? newStatus) => super.noSuchMethod(
        Invocation.setter(
          #status,
          newStatus,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);
  @override
  bool get isDeployed => (super.noSuchMethod(
        Invocation.getter(#isDeployed),
        returnValue: false,
      ) as bool);
  @override
  bool get isStopped => (super.noSuchMethod(
        Invocation.getter(#isStopped),
        returnValue: false,
      ) as bool);
  @override
  List<_i3.DeviceDescriptor> get remainingDevicesToRegister =>
      (super.noSuchMethod(
        Invocation.getter(#remainingDevicesToRegister),
        returnValue: <_i3.DeviceDescriptor>[],
      ) as List<_i3.DeviceDescriptor>);
  @override
  _i5.Stream<_i3.DataPoint> dataByType(String? type) => (super.noSuchMethod(
        Invocation.method(
          #dataByType,
          [type],
        ),
        returnValue: _i5.Stream<_i3.DataPoint>.empty(),
      ) as _i5.Stream<_i3.DataPoint>);
  @override
  _i5.Future<_i3.StudyStatus> tryDeployment({bool? useCached = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #tryDeployment,
          [],
          {#useCached: useCached},
        ),
        returnValue: _i5.Future<_i3.StudyStatus>.value(
            _i3.StudyStatus.DeploymentNotStarted),
      ) as _i5.Future<_i3.StudyStatus>);
  @override
  _i5.Future<bool> saveDeployment() => (super.noSuchMethod(
        Invocation.method(
          #saveDeployment,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<bool> restoreDeployment() => (super.noSuchMethod(
        Invocation.method(
          #restoreDeployment,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<bool> eraseDeployment() => (super.noSuchMethod(
        Invocation.method(
          #eraseDeployment,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<void> configure({
    _i3.DataEndPoint? dataEndPoint,
    String? privacySchemaName = r'dk.cachet.carp',
    _i2.DatumTransformer? transformer,
    bool? askForPermissions = true,
    bool? enableNotifications = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #configure,
          [],
          {
            #dataEndPoint: dataEndPoint,
            #privacySchemaName: privacySchemaName,
            #transformer: transformer,
            #askForPermissions: askForPermissions,
            #enableNotifications: enableNotifications,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> askForAllPermissions() => (super.noSuchMethod(
        Invocation.method(
          #askForAllPermissions,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  void start([bool? resume = true]) => super.noSuchMethod(
        Invocation.method(
          #start,
          [resume],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void stop() => super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<void> initialize(
    _i3.Study? study,
    _i3.DeviceRegistration? deviceRegistration,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [
            study,
            deviceRegistration,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> tryRegisterConnectedDevice(_i3.DeviceDescriptor? device) =>
      (super.noSuchMethod(
        Invocation.method(
          #tryRegisterConnectedDevice,
          [device],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> tryRegisterConnectedDevices() => (super.noSuchMethod(
        Invocation.method(
          #tryRegisterConnectedDevices,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [DataPointHeader].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataPointHeader extends _i1.Mock implements _i3.DataPointHeader {
  MockDataPointHeader() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set studyId(String? _studyId) => super.noSuchMethod(
        Invocation.setter(
          #studyId,
          _studyId,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set deviceRoleName(String? _deviceRoleName) => super.noSuchMethod(
        Invocation.setter(
          #deviceRoleName,
          _deviceRoleName,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set triggerId(String? _triggerId) => super.noSuchMethod(
        Invocation.setter(
          #triggerId,
          _triggerId,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set userId(String? _userId) => super.noSuchMethod(
        Invocation.setter(
          #userId,
          _userId,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set uploadTime(DateTime? _uploadTime) => super.noSuchMethod(
        Invocation.setter(
          #uploadTime,
          _uploadTime,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set startTime(DateTime? _startTime) => super.noSuchMethod(
        Invocation.setter(
          #startTime,
          _startTime,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set endTime(DateTime? _endTime) => super.noSuchMethod(
        Invocation.setter(
          #endTime,
          _endTime,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.DataFormat get dataFormat => (super.noSuchMethod(
        Invocation.getter(#dataFormat),
        returnValue: _FakeDataFormat_4(
          this,
          Invocation.getter(#dataFormat),
        ),
      ) as _i3.DataFormat);
  @override
  set dataFormat(_i3.DataFormat? _dataFormat) => super.noSuchMethod(
        Invocation.setter(
          #dataFormat,
          _dataFormat,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
